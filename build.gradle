plugins {
    id 'com.jfrog.bintray' version '1.2'
    id 'ch.netzwerg.release' version '1.1.0'
}

apply plugin: 'ch.netzwerg.release'
apply plugin: 'eclipse'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
}

subprojects { subproject ->

    apply from: "$rootDir/gradle/dependencies.gradle"
    apply from: "$rootDir/gradle/scalatest.gradle"

    test {
        maxParallelForks Runtime.runtime.availableProcessors()
    }

    repositories {
        jcenter()
        maven { url 'http://repo.typesafe.com/typesafe/releases/' }
	maven { url 'http://mirrors.hypo.cn/twttr-maven/'}
        maven { url 'https://maven.twttr.com/' }
    }

    dependencies {
        compile "org.scala-lang:scala-library:${scalaVersion}"

        // Was dependencyOverrides in SBT, will probably cause issues
        compile 'org.apache.zookeeper:zookeeper:3.4.6' // internal twitter + kafka + curator
        compile 'org.slf4j:slf4j-api:1.6.4' // libthrift 0.5 otherwise pins 1.5.x
        // EOF dependencyOverrides

        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-all:1.10.19'
        testCompile "org.scalatest:scalatest_${scalaInterfaceVersion}:2.2.5"
    }
    // SBT migration note: end of zipkinSettings

    bintray {
        // Read variables from travis encrypted config or local
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')

        configurations = ['archives']
        publish = true

        pkg {
            licenses = ['Apache-2.0']
            repo = 'zipkin'
            vcsUrl = 'https://github.com/openzipkin/zipkin.git'
            name = "${subproject.name}"
            version {
                name = "${project.version}"
                desc = 'Zipkin version ${project.version}'
                released  = new Date()
                vcsTag = "${project.version}"
            }
        }
    }
}

release {
  dependsOn build // 'distZip' could e.g be used in combination with the 'application' plugin
  push = true // 'true' would e.g. be useful when triggering the release task on a CI server
  versionSuffix = '-DEV' // '.DEV' or '' (empty) could be useful alternatives
  tagPrefix = 'v' // 'r' or '' (empty) could be useful alternatives
}

// Quick hack to visualize inter-project dependencies
task dependencyReport {
    description "Write the dependency graph of the zipkin-* projects in this repository into project-dependencies.dot for use with GraphViz."
    doLast {
        def file = new File("project-dependencies.dot")
        file.delete()
        file << "digraph {\n"
        file << "splines=ortho\n"
        rootProject.childProjects.each { item ->
            def from = item.value
            from.configurations.compile.dependencies
                    .matching { it in ProjectDependency }
                    .each { to -> file << ("\"${from.name}\" -> \"${to.name}\"\n")}
        }
        file << "}\n"
    }
}

